import requests
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
BLOCKCHAIN_API_URL = "https://api.blockchair.com/bitcoin/transactions"
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
THRESHOLD_USD = 1_000_000  # –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
EXCHANGE_RATE_API = "https://api.coindesk.com/v1/bpi/currentprice/USD.json"

def get_btc_usd_rate():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC/USD"""
    try:
        resp = requests.get(EXCHANGE_RATE_API, timeout=5)
        data = resp.json()
        return float(data["bpi"]["USD"]["rate"].replace(",", ""))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ BTC/USD: {e}")
        return None

def get_recent_transactions():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç–∏ –ë–∏—Ç–∫–æ–∏–Ω"""
    try:
        resp = requests.get(BLOCKCHAIN_API_URL, timeout=5)
        data = resp.json()
        return data.get("data", [])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return []

def filter_large_transactions(transactions, btc_usd_rate):
    """–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞"""
    large_tx = []
    for tx in transactions:
        total_btc = sum([out["value"] for out in tx.get("outputs", [])]) / 1e8
        total_usd = total_btc * btc_usd_rate
        if total_usd >= THRESHOLD_USD:
            large_tx.append({
                "hash": tx.get("hash"),
                "btc": total_btc,
                "usd": total_usd,
                "time": tx.get("time")
            })
    return large_tx

def notify_large_transaction(tx):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä—É–ø–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    logging.info(
        f"üêã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä—É–ø–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n"
        f"Hash: {tx['hash']}\n"
        f"–°—É–º–º–∞: {tx['btc']:.4f} BTC (~${tx['usd']:,.2f})\n"
        f"–í—Ä–µ–º—è: {tx['time']}"
    )

def run_watcher():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Whale Watcher...")
    while True:
        rate = get_btc_usd_rate()
        if rate:
            txs = get_recent_transactions()
            large_txs = filter_large_transactions(txs, rate)
            for tx in large_txs:
                notify_large_transaction(tx)
        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    run_watcher()
